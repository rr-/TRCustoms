# Generated by Django 4.2.3 on 2024-11-12 12:21

from datetime import datetime, timezone

from django.db import migrations
from django.db.models import Count


def forward_func(apps, schema_editor):
    launch_date = datetime(2022, 4, 1, tzinfo=timezone.utc)

    batch_size = 1000
    Level = apps.get_model("levels", "Level")

    qs = (
        Level.objects.all()
        .annotate(file_count=Count("files"))
        .values_list("id", "file_count", "last_file__created")
    )
    while True:
        batch = list(qs[:batch_size])
        if not batch:
            break

        update_list = [
            Level(
                id=id,
                last_user_content_updated=(
                    last_file_created
                    if last_file_created is not None
                    and file_count > 1
                    and last_file_created >= launch_date
                    else None
                ),
            )
            for id, file_count, last_file_created in batch
        ]
        Level.objects.bulk_update(update_list, ["last_user_content_updated"])
        qs = qs[batch_size:]


def reverse_func(apps, schema_editor):
    batch_size = 1000
    Level = apps.get_model("levels", "Level")

    qs = Level.objects.all().values_list("id", "last_file__created")
    while True:
        batch = list(qs[:batch_size])
        if not batch:
            break

        update_list = [
            Level(id=id, last_user_content_updated=last_file_created)
            for id, last_file_created in batch
        ]
        Level.objects.bulk_update(update_list, ["last_user_content_updated"])
        qs = qs[batch_size:]


class Migration(migrations.Migration):
    dependencies = [
        ("levels", "0018_level_rating_count"),
    ]

    operations = [
        migrations.RunPython(forward_func, reverse_func),
    ]
