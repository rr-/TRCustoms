# Generated by Django 4.0 on 2022-03-05 22:53
# pylint: disable=line-too-long

import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.db import migrations, models

import trcustoms.users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("uploads", "0001_initial"),
        ("common", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "trle_reviewer_id",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "trle_author_id",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                ("bio", models.TextField(blank=True, max_length=5000)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("trle", "trle.net"),
                            ("trcustoms", "trcustoms"),
                        ],
                        max_length=10,
                    ),
                ),
                ("is_email_confirmed", models.BooleanField(default=False)),
                ("is_pending_activation", models.BooleanField(default=False)),
                ("is_banned", models.BooleanField(default=False)),
                (
                    "ban_reason",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="common.country",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "picture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="uploads.uploadedfile",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "permissions": [
                    ("edit_levels", "Can edit levels"),
                    ("edit_reviews", "Can edit reviews"),
                    ("edit_tags", "Can edit tags"),
                    ("edit_news", "Can edit news"),
                    ("edit_users", "Can edit users"),
                    ("list_users", "Can list users"),
                    ("review_audit_logs", "Can review audit logs"),
                    ("review_levels", "Can review levels"),
                    ("upload_levels", "Can upload levels"),
                ],
                "abstract": False,
                "default_permissions": [],
            },
            managers=[
                ("objects", trcustoms.users.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("username"),
                name="user_username_unique",
            ),
        ),
    ]
